// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gx_test.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace GxTest {

  #region Messages
  public sealed class gx_data : pb::IMessage {
    private static readonly pb::MessageParser<gx_data> _parser = new pb::MessageParser<gx_data>(() => new gx_data());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data> Parser { get { return _parser; } }

    /// <summary>Field number for the "sc_double" field.</summary>
    public const int ScDoubleFieldNumber = 1;
    private double scDouble_;
    /// <summary>
    ///*************test scalar********************
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double ScDouble {
      get { return scDouble_; }
      set {
        scDouble_ = value;
      }
    }

    /// <summary>Field number for the "sc_float" field.</summary>
    public const int ScFloatFieldNumber = 2;
    private float scFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScFloat {
      get { return scFloat_; }
      set {
        scFloat_ = value;
      }
    }

    /// <summary>Field number for the "sc_int32" field.</summary>
    public const int ScInt32FieldNumber = 3;
    private int scInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScInt32 {
      get { return scInt32_; }
      set {
        scInt32_ = value;
      }
    }

    /// <summary>Field number for the "sc_int64" field.</summary>
    public const int ScInt64FieldNumber = 4;
    private long scInt64_;
    /// <summary>
    ///long
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScInt64 {
      get { return scInt64_; }
      set {
        scInt64_ = value;
      }
    }

    /// <summary>Field number for the "sc_uint32" field.</summary>
    public const int ScUint32FieldNumber = 5;
    private uint scUint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScUint32 {
      get { return scUint32_; }
      set {
        scUint32_ = value;
      }
    }

    /// <summary>Field number for the "sc_uint64" field.</summary>
    public const int ScUint64FieldNumber = 6;
    private ulong scUint64_;
    /// <summary>
    ///ulong
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScUint64 {
      get { return scUint64_; }
      set {
        scUint64_ = value;
      }
    }

    /// <summary>Field number for the "sc_sint32" field.</summary>
    public const int ScSint32FieldNumber = 7;
    private int scSint32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScSint32 {
      get { return scSint32_; }
      set {
        scSint32_ = value;
      }
    }

    /// <summary>Field number for the "sc_sint64" field.</summary>
    public const int ScSint64FieldNumber = 8;
    private long scSint64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScSint64 {
      get { return scSint64_; }
      set {
        scSint64_ = value;
      }
    }

    /// <summary>Field number for the "sc_fixed32" field.</summary>
    public const int ScFixed32FieldNumber = 9;
    private uint scFixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ScFixed32 {
      get { return scFixed32_; }
      set {
        scFixed32_ = value;
      }
    }

    /// <summary>Field number for the "sc_fixed64" field.</summary>
    public const int ScFixed64FieldNumber = 10;
    private ulong scFixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ScFixed64 {
      get { return scFixed64_; }
      set {
        scFixed64_ = value;
      }
    }

    /// <summary>Field number for the "sc_sfixed32" field.</summary>
    public const int ScSfixed32FieldNumber = 11;
    private int scSfixed32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScSfixed32 {
      get { return scSfixed32_; }
      set {
        scSfixed32_ = value;
      }
    }

    /// <summary>Field number for the "sc_sfixed64" field.</summary>
    public const int ScSfixed64FieldNumber = 12;
    private long scSfixed64_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ScSfixed64 {
      get { return scSfixed64_; }
      set {
        scSfixed64_ = value;
      }
    }

    /// <summary>Field number for the "sc_bool" field.</summary>
    public const int ScBoolFieldNumber = 13;
    private bool scBool_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ScBool {
      get { return scBool_; }
      set {
        scBool_ = value;
      }
    }

    /// <summary>Field number for the "sc_string" field.</summary>
    public const int ScStringFieldNumber = 14;
    private string scString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScString {
      get { return scString_; }
      set {
        scString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sc_bytes" field.</summary>
    public const int ScBytesFieldNumber = 15;
    private pb::ByteString scBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ScBytes {
      get { return scBytes_; }
      set {
        scBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "t_enum" field.</summary>
    public const int TEnumFieldNumber = 16;
    private global::GxTest.gx_data.Types.MyEnum tEnum_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GxTest.gx_data.Types.MyEnum TEnum {
      get { return tEnum_; }
      set {
        tEnum_ = value;
      }
    }

    /// <summary>Field number for the "t_enum_2" field.</summary>
    public const int TEnum2FieldNumber = 17;
    private global::GxTest.gx_data.Types.MyEnum2 tEnum2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GxTest.gx_data.Types.MyEnum2 TEnum2 {
      get { return tEnum2_; }
      set {
        tEnum2_ = value;
      }
    }

    /// <summary>Field number for the "t_class" field.</summary>
    public const int TClassFieldNumber = 18;
    private global::GxTest.gx_data_type tClass_;
    /// <summary>
    ///*************test type********************
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GxTest.gx_data_type TClass {
      get { return tClass_; }
      set {
        tClass_ = value;
      }
    }

    /// <summary>Field number for the "t_nest_type" field.</summary>
    public const int TNestTypeFieldNumber = 19;
    private global::GxTest.gx_data.Types.gx_data_nested tNestType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GxTest.gx_data.Types.gx_data_nested TNestType {
      get { return tNestType_; }
      set {
        tNestType_ = value;
      }
    }

    /// <summary>Field number for the "rep_int32" field.</summary>
    public const int RepInt32FieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_repInt32_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> repInt32_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///*************test repeated fields********************
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RepInt32 {
      get { return repInt32_; }
    }

    /// <summary>Field number for the "rep_string" field.</summary>
    public const int RepStringFieldNumber = 21;
    private static readonly pb::FieldCodec<string> _repeated_repString_codec
        = pb::FieldCodec.ForString(170);
    private readonly pbc::RepeatedField<string> repString_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RepString {
      get { return repString_; }
    }

    /// <summary>Field number for the "rep_bytes" field.</summary>
    public const int RepBytesFieldNumber = 22;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_repBytes_codec
        = pb::FieldCodec.ForBytes(178);
    private readonly pbc::RepeatedField<pb::ByteString> repBytes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> RepBytes {
      get { return repBytes_; }
    }

    /// <summary>Field number for the "rep_enum" field.</summary>
    public const int RepEnumFieldNumber = 23;
    private static readonly pb::FieldCodec<global::GxTest.gx_data.Types.MyEnum> _repeated_repEnum_codec
        = pb::FieldCodec.ForEnum(186, x => (int) x, x => (global::GxTest.gx_data.Types.MyEnum) x);
    private readonly pbc::RepeatedField<global::GxTest.gx_data.Types.MyEnum> repEnum_ = new pbc::RepeatedField<global::GxTest.gx_data.Types.MyEnum>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GxTest.gx_data.Types.MyEnum> RepEnum {
      get { return repEnum_; }
    }

    /// <summary>Field number for the "rep_type" field.</summary>
    public const int RepTypeFieldNumber = 24;
    private static readonly pb::FieldCodec<global::GxTest.gx_data_type> _repeated_repType_codec
        = pb::FieldCodec.ForMessage(194, global::GxTest.gx_data_type.Parser);
    private readonly pbc::RepeatedField<global::GxTest.gx_data_type> repType_ = new pbc::RepeatedField<global::GxTest.gx_data_type>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GxTest.gx_data_type> RepType {
      get { return repType_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScDouble != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(ScDouble);
      }
      if (ScFloat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ScFloat);
      }
      if (ScInt32 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScInt32);
      }
      if (ScInt64 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ScInt64);
      }
      if (ScUint32 != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ScUint32);
      }
      if (ScUint64 != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ScUint64);
      }
      if (ScSint32 != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(ScSint32);
      }
      if (ScSint64 != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(ScSint64);
      }
      if (ScFixed32 != 0) {
        output.WriteRawTag(77);
        output.WriteFixed32(ScFixed32);
      }
      if (ScFixed64 != 0UL) {
        output.WriteRawTag(81);
        output.WriteFixed64(ScFixed64);
      }
      if (ScSfixed32 != 0) {
        output.WriteRawTag(93);
        output.WriteSFixed32(ScSfixed32);
      }
      if (ScSfixed64 != 0L) {
        output.WriteRawTag(97);
        output.WriteSFixed64(ScSfixed64);
      }
      if (ScBool != false) {
        output.WriteRawTag(104);
        output.WriteBool(ScBool);
      }
      if (ScString.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ScString);
      }
      if (ScBytes.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(ScBytes);
      }
      if (TEnum != 0) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) TEnum);
      }
      if (TEnum2 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) TEnum2);
      }
      if (tClass_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(TClass);
      }
      if (tNestType_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(TNestType);
      }
      repInt32_.WriteTo(output, _repeated_repInt32_codec);
      repString_.WriteTo(output, _repeated_repString_codec);
      repBytes_.WriteTo(output, _repeated_repBytes_codec);
      repEnum_.WriteTo(output, _repeated_repEnum_codec);
      repType_.WriteTo(output, _repeated_repType_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScDouble != 0D) {
        size += 1 + 8;
      }
      if (ScFloat != 0F) {
        size += 1 + 4;
      }
      if (ScInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScInt32);
      }
      if (ScInt64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ScInt64);
      }
      if (ScUint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ScUint32);
      }
      if (ScUint64 != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ScUint64);
      }
      if (ScSint32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ScSint32);
      }
      if (ScSint64 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ScSint64);
      }
      if (ScFixed32 != 0) {
        size += 1 + 4;
      }
      if (ScFixed64 != 0UL) {
        size += 1 + 8;
      }
      if (ScSfixed32 != 0) {
        size += 1 + 4;
      }
      if (ScSfixed64 != 0L) {
        size += 1 + 8;
      }
      if (ScBool != false) {
        size += 1 + 1;
      }
      if (ScString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScString);
      }
      if (ScBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ScBytes);
      }
      if (TEnum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TEnum);
      }
      if (TEnum2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TEnum2);
      }
      if (tClass_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TClass);
      }
      if (tNestType_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TNestType);
      }
      size += repInt32_.CalculateSize(_repeated_repInt32_codec);
      size += repString_.CalculateSize(_repeated_repString_codec);
      size += repBytes_.CalculateSize(_repeated_repBytes_codec);
      size += repEnum_.CalculateSize(_repeated_repEnum_codec);
      size += repType_.CalculateSize(_repeated_repType_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            ScDouble = input.ReadDouble();
            break;
          }
          case 21: {
            ScFloat = input.ReadFloat();
            break;
          }
          case 24: {
            ScInt32 = input.ReadInt32();
            break;
          }
          case 32: {
            ScInt64 = input.ReadInt64();
            break;
          }
          case 40: {
            ScUint32 = input.ReadUInt32();
            break;
          }
          case 48: {
            ScUint64 = input.ReadUInt64();
            break;
          }
          case 56: {
            ScSint32 = input.ReadSInt32();
            break;
          }
          case 64: {
            ScSint64 = input.ReadSInt64();
            break;
          }
          case 77: {
            ScFixed32 = input.ReadFixed32();
            break;
          }
          case 81: {
            ScFixed64 = input.ReadFixed64();
            break;
          }
          case 93: {
            ScSfixed32 = input.ReadSFixed32();
            break;
          }
          case 97: {
            ScSfixed64 = input.ReadSFixed64();
            break;
          }
          case 104: {
            ScBool = input.ReadBool();
            break;
          }
          case 114: {
            ScString = input.ReadString();
            break;
          }
          case 122: {
            ScBytes = input.ReadBytes();
            break;
          }
          case 128: {
            tEnum_ = (global::GxTest.gx_data.Types.MyEnum) input.ReadEnum();
            break;
          }
          case 136: {
            tEnum2_ = (global::GxTest.gx_data.Types.MyEnum2) input.ReadEnum();
            break;
          }
          case 146: {
            if (tClass_ == null) {
              tClass_ = new global::GxTest.gx_data_type();
            }
            input.ReadMessage(tClass_);
            break;
          }
          case 154: {
            if (tNestType_ == null) {
              tNestType_ = new global::GxTest.gx_data.Types.gx_data_nested();
            }
            input.ReadMessage(tNestType_);
            break;
          }
          case 162:
          case 160: {
            repInt32_.AddEntriesFrom(input, _repeated_repInt32_codec);
            break;
          }
          case 170: {
            repString_.AddEntriesFrom(input, _repeated_repString_codec);
            break;
          }
          case 178: {
            repBytes_.AddEntriesFrom(input, _repeated_repBytes_codec);
            break;
          }
          case 186:
          case 184: {
            repEnum_.AddEntriesFrom(input, _repeated_repEnum_codec);
            break;
          }
          case 194: {
            repType_.AddEntriesFrom(input, _repeated_repType_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the gx_data message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static class Types {
      /// <summary>
      ///*************test enum********************
      /// </summary>
      public enum MyEnum {
        Enum0 = 0,
        Enum1 = 1,
        Enum2 = 2,
        Enum7 = 7,
      }

      /// <summary>
      ///test Enum alias
      /// </summary>
      public enum MyEnum2 {
        Enum20 = 0,
        Enum21 = 11,
        Enum22 = 11,
      }

      /// <summary>
      ///test nested type
      /// </summary>
      public sealed class gx_data_nested : pb::IMessage {
        private static readonly pb::MessageParser<gx_data_nested> _parser = new pb::MessageParser<gx_data_nested>(() => new gx_data_nested());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<gx_data_nested> Parser { get { return _parser; } }

        /// <summary>Field number for the "d" field.</summary>
        public const int DFieldNumber = 1;
        private string d_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string D {
          get { return d_; }
          set {
            d_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (D.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(D);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (D.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(D);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                D = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed class gx_data_type : pb::IMessage {
    private static readonly pb::MessageParser<gx_data_type> _parser = new pb::MessageParser<gx_data_type>(() => new gx_data_type());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data_type> Parser { get { return _parser; } }

    /// <summary>Field number for the "d1" field.</summary>
    public const int D1FieldNumber = 10;
    private float d1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float D1 {
      get { return d1_; }
      set {
        d1_ = value;
      }
    }

    /// <summary>Field number for the "d2" field.</summary>
    public const int D2FieldNumber = 20;
    private int d2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int D2 {
      get { return d2_; }
      set {
        d2_ = value;
      }
    }

    /// <summary>Field number for the "d3" field.</summary>
    public const int D3FieldNumber = 30;
    private string d3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string D3 {
      get { return d3_; }
      set {
        d3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "d4" field.</summary>
    public const int D4FieldNumber = 40;
    private static readonly pb::FieldCodec<string> _repeated_d4_codec
        = pb::FieldCodec.ForString(322);
    private readonly pbc::RepeatedField<string> d4_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> D4 {
      get { return d4_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (D1 != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(D1);
      }
      if (D2 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(D2);
      }
      if (D3.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(D3);
      }
      d4_.WriteTo(output, _repeated_d4_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (D1 != 0F) {
        size += 1 + 4;
      }
      if (D2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(D2);
      }
      if (D3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(D3);
      }
      size += d4_.CalculateSize(_repeated_d4_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 85: {
            D1 = input.ReadFloat();
            break;
          }
          case 160: {
            D2 = input.ReadInt32();
            break;
          }
          case 242: {
            D3 = input.ReadString();
            break;
          }
          case 322: {
            d4_.AddEntriesFrom(input, _repeated_d4_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class gx_data3 : pb::IMessage {
    private static readonly pb::MessageParser<gx_data3> _parser = new pb::MessageParser<gx_data3>(() => new gx_data3());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data3> Parser { get { return _parser; } }

    /// <summary>Field number for the "otherData" field.</summary>
    public const int OtherDataFieldNumber = 1;
    private global::GxTestOther.gx_data_other otherData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GxTestOther.gx_data_other OtherData {
      get { return otherData_; }
      set {
        otherData_ = value;
      }
    }

    /// <summary>Field number for the "d" field.</summary>
    public const int DFieldNumber = 2;
    private int d_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int D {
      get { return d_; }
      set {
        d_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (otherData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OtherData);
      }
      if (D != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (otherData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherData);
      }
      if (D != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(D);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (otherData_ == null) {
              otherData_ = new global::GxTestOther.gx_data_other();
            }
            input.ReadMessage(otherData_);
            break;
          }
          case 16: {
            D = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///************** test Oneof *******************
  /// </summary>
  public sealed class gx_data_oneof : pb::IMessage {
    private static readonly pb::MessageParser<gx_data_oneof> _parser = new pb::MessageParser<gx_data_oneof>(() => new gx_data_oneof());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data_oneof> Parser { get { return _parser; } }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return tOneofCase_ == TOneofOneofCase.Name ? (string) tOneof_ : ""; }
      set {
        tOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        tOneofCase_ = TOneofOneofCase.Name;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return tOneofCase_ == TOneofOneofCase.Index ? (int) tOneof_ : 0; }
      set {
        tOneof_ = value;
        tOneofCase_ = TOneofOneofCase.Index;
      }
    }

    private object tOneof_;
    /// <summary>Enum of possible cases for the "t_oneof" oneof.</summary>
    public enum TOneofOneofCase {
      None = 0,
      Name = 1,
      Index = 2,
    }
    private TOneofOneofCase tOneofCase_ = TOneofOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TOneofOneofCase TOneofCase {
      get { return tOneofCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTOneof() {
      tOneofCase_ = TOneofOneofCase.None;
      tOneof_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tOneofCase_ == TOneofOneofCase.Name) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (tOneofCase_ == TOneofOneofCase.Index) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tOneofCase_ == TOneofOneofCase.Name) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (tOneofCase_ == TOneofOneofCase.Index) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///************** test Map *******************
  /// </summary>
  public sealed class gx_data_map : pb::IMessage {
    private static readonly pb::MessageParser<gx_data_map> _parser = new pb::MessageParser<gx_data_map>(() => new gx_data_map());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data_map> Parser { get { return _parser; } }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 1;
    private static readonly pbc::MapField<string, int>.Codec _map_m_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<string, int> m_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> M {
      get { return m_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      m_.WriteTo(output, _map_m_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += m_.CalculateSize(_map_m_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            m_.AddEntriesFrom(input, _map_m_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
