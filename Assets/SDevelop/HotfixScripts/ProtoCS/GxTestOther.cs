// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gx_test_other.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace GxTestOther {

  #region Messages
  public sealed class gx_data_other : pb::IMessage {
    private static readonly pb::MessageParser<gx_data_other> _parser = new pb::MessageParser<gx_data_other>(() => new gx_data_other());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<gx_data_other> Parser { get { return _parser; } }

    /// <summary>Field number for the "sc_float" field.</summary>
    public const int ScFloatFieldNumber = 2;
    private float scFloat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ScFloat {
      get { return scFloat_; }
      set {
        scFloat_ = value;
      }
    }

    /// <summary>Field number for the "sc_int32" field.</summary>
    public const int ScInt32FieldNumber = 3;
    private int scInt32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ScInt32 {
      get { return scInt32_; }
      set {
        scInt32_ = value;
      }
    }

    /// <summary>Field number for the "sc_string" field.</summary>
    public const int ScStringFieldNumber = 6;
    private string scString_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ScString {
      get { return scString_; }
      set {
        scString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ScFloat != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ScFloat);
      }
      if (ScInt32 != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ScInt32);
      }
      if (ScString.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ScString);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ScFloat != 0F) {
        size += 1 + 4;
      }
      if (ScInt32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScInt32);
      }
      if (ScString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ScString);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 21: {
            ScFloat = input.ReadFloat();
            break;
          }
          case 24: {
            ScInt32 = input.ReadInt32();
            break;
          }
          case 50: {
            ScString = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
